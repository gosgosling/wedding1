//require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
//require('dotenv').config();
const express = require('express');
const cors = require('cors');
const fs = require('fs').promises;
const path = require('path');
const app = express();
const port = 3000;
const nodemailer = require('nodemailer'); // –î–æ–±–∞–≤–ª—è–µ–º nodemailer
//const config  = require('./config');

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: false });
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
//const bot = new TelegramBot(config.tg.token, { polling: false });
//const TELEGRAM_CHAT_ID = config.tg.chatid;

// –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –≤–∞—à–µ–≥–æ –¥–æ–º–µ–Ω–∞
app.use(cors({
    origin: ['https://weddingvk.onrender.com', 'http://localhost:3000'],
    methods: ['GET', 'POST'],
    credentials: true
}));

// –í–∞–∂–Ω–æ: –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ middleware –ø–µ—Ä–µ–¥ —Ä–æ—É—Ç–∞–º–∏
//app.use(cors());
app.use(express.json());
app.use(express.static('public'));
app.use(express.urlencoded({ extended: true }));

// Middleware
//app.use(cors());
//app.use(express.json());



/*const emailConfig = {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASSWORD,
    to: process.env.EMAIL_TO
};

const transporter = nodemailer.createTransport({
    host: 'smtp.yandex.ru',
    port: 465,
    secure: true,
    auth: {
        user: emailConfig.user,
        pass: emailConfig.pass
    }
});*/

/*const transporter = nodemailer.createTransport({
    host: 'smtp.yandex.ru', 
    port: 465,
    secure: true,
    auth: {
        user: config.email.user, 
        pass: config.email.pass 
    }
});*/


// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏
const dataFile = path.join(__dirname, 'data', 'rsvp.json');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
async function ensureDataDirectory() {
    const dir = path.join(__dirname, 'data');
    try {
        await fs.access(dir);
    } catch {
        await fs.mkdir(dir);
        await fs.writeFile(dataFile, '[]');
    }
}


function formatRsvpMessage(data) {
    return `
üéâ –ù–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è!

üë§ –ò–º—è: ${data.name}
üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: ${data.guests}

üé≠ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞ —Ü–µ—Ä–µ–º–æ–Ω–∏–∏: ${data.ceremony_attendance ? '‚úÖ' : '‚ùå'}
üçΩ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞ –±–∞–Ω–∫–µ—Ç–µ: ${data.banquet_attendance ? '‚úÖ' : '‚ùå'}

üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${data.comments || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'}

üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}
    `;
}


// –û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ñ–æ—Ä–º—ã RSVP
app.post('/api/rsvp', async(req, res) => {
    try {
        console.log('Received data:', req.body);
        const { name, guests, comments, ceremony_attendance, banquet_attendance } = req.body;

        //console.log('Ceremony attendance:', ceremony_attendance);
        //console.log('Banquet attendance:', banquet_attendance);

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!name || !guests) {
            return res.status(400).json({
                success: false,
                message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π'
            });
        }

        if (!ceremony_attendance && !banquet_attendance) {
            return res.status(400).json({
                success: false,
                message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è'
            });
        }

        /*const emailText = `
            –ù–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è!

            –ò–º—è: ${name}
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: ${guests}
            
            –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞ —Ü–µ—Ä–µ–º–æ–Ω–∏–∏: ${ceremony_attendance ? '–î–∞' : '–ù–µ—Ç'}
            –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞ –±–∞–Ω–∫–µ—Ç–µ: ${banquet_attendance ? '–î–∞' : '–ù–µ—Ç'}
            
            –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ${comments || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'}
            
            –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
        `;

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏—Å—å–º–∞
        const mailOptions = {
            from: config.email.user, // –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
            to: config.email.to, // –í–∞—à–∞ –ª–∏—á–Ω–∞—è –ø–æ—á—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            //from: emailConfig.user,
            //to: emailConfig.to,
            subject: `–ù–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –æ—Ç ${name}`,
            text: emailText
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
        await transporter.sendMail(mailOptions);*/


        // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        let rsvpData = [];
        try {
            const data = await fs.readFile(dataFile, 'utf8');
            rsvpData = JSON.parse(data);
        } catch (error) {
            await fs.writeFile(dataFile, '[]');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        const newRsvp = {
            id: Date.now(),
            name,
            guests: parseInt(guests),
            comments: comments || '',
            ceremony_attendance: Boolean(ceremony_attendance),
            banquet_attendance: Boolean(banquet_attendance),
            timestamp: new Date().toISOString()
        };

        console.log('Saving RSVP:', newRsvp);

        rsvpData.push(newRsvp);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await fs.writeFile(dataFile, JSON.stringify(rsvpData, null, 2));
        
        const message = formatRsvpMessage(newRsvp);
        await bot.sendMessage(TELEGRAM_CHAT_ID, message, { parse_mode: 'HTML' });

        res.json({
            success: true,
            message: '–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ RSVP:', error);
        res.status(500).json({
            success: false,
            message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö'
        });
    }
});

async function testEmail() {
    try {
        await transporter.sendMail({
            from: config.email.user,
            to: config.email.to,
            subject: '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ',
            text: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—á—Ç—ã'
        });
        console.log('–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞:', error);
    }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
    await ensureDataDirectory();
    app.listen(port, () => {
        console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
    });
}

startServer();
//testEmail();